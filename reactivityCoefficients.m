function [alphad, alphaf, alphas, alphaco, alphar, alphard] = reactivityCoefficients(rhoPlotPath, tempInnerPlotPath, tempOuterPlotPath)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%gets average values for reactivity coefficients by pulling data from a
%user provided plot generated by extractSAS.py and associated scripts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    numInner = 77;
    numOuter = 102;
    
    numAssemblies = numInner+numOuter;

    %open rho plot and extract data
    rhoPlot = openfig(rhoPlotPath, 'invisible');
    rhoObjs = get(get(rhoPlot,'Children'),'Children');

    rhoTime = get(rhoObjs{2}(1),'XData');

    controlSystem = get(rhoObjs{2}(1),'YData');
    structureAxialExpansion = get(rhoObjs{2}(2),'YData');
    coolant = get(rhoObjs{2}(3),'YData');
    cladAxialExpansion = get(rhoObjs{2}(4),'YData');
    fuelAxialExpansion = get(rhoObjs{2}(5),'YData');
    doppler = get(rhoObjs{2}(6),'YData');
    radExpansion = get(rhoObjs{2}(7),'YData');
    CRDL = get(rhoObjs{2}(8),'YData');
    netReactivity = get(rhoObjs{2}(9),'YData');

    %open temp plot and extract data
    tempInnerPlot = openfig(tempInnerPlotPath, 'invisible');
    tempInnerObjs = get(get(tempInnerPlot, 'Children'), 'Children');

    tempOuterPlot = openfig(tempOuterPlotPath, 'invisible');
    tempOuterObjs = get(get(tempOuterPlot, 'Children'), 'Children');

    tempTime = get(tempInnerObjs{2}(1), 'XData');

    topActiveCoreInner = get(tempInnerObjs{2}(1), 'YData');
    cladAveInner = get(tempInnerObjs{2}(4), 'YData');
    fuelAveInner = get(tempInnerObjs{2}(5), 'YData');
    coolantOutletInner = get(tempInnerObjs{2}(6), 'YData');
    coolantInletInner = get(tempInnerObjs{2}(7), 'YData');

    topActiveCoreOuter = get(tempOuterObjs{2}(1), 'YData');
    cladAveOuter = get(tempOuterObjs{2}(4), 'YData');
    fuelAveOuter = get(tempOuterObjs{2}(5), 'YData');
    coolantOutletOuter = get(tempOuterObjs{2}(6), 'YData');
    coolantInletOuter = get(tempOuterObjs{2}(7), 'YData');

    %calculate average temps weighted by number in inner and outer core
    topActiveCore = (numInner*topActiveCoreInner + numOuter*topActiveCoreOuter)./numAssemblies;
    cladAve = (numInner*cladAveInner + numOuter*cladAveOuter)./numAssemblies;
    fuelAve = (numInner*fuelAveInner + numOuter*fuelAveOuter)./numAssemblies;
    coolantOutlet = (numInner*coolantOutletInner + numOuter*coolantOutletOuter)./numAssemblies;
    coolantInlet = (numInner*coolantInletInner + numOuter*coolantInletOuter)./numAssemblies;
    
    coolantAve = (coolantInlet + coolantOutlet + topActiveCore)./3; %assuming a linear profile for coolant temp (which is obviously not the case)
    
    %remove values from reactivity vectors that don't correspond to times
    %in temp vectors
    i = 1; %reactivity incrementer
    j = 2; %temp incrementer, start at 2 to avoid fact that rhoTime(1) = 0.5 and tempTime(1) = 0.0
    controlSystemTmp = [];
    structureAxialExpansionTmp = [];
    coolantTmp = [];
    cladAxialExpansionTmp = [];
    fuelAxialExpansionTmp = [];
    dopplerTmp = [];
    radExpansionTmp = [];
    CRDLTmp = [];
    netReactivityTmp = [];
    while i < length(rhoTime) + 1 && j < length(tempTime) + 1
        if rhoTime(i) == tempTime(j)
            controlSystemTmp = [controlSystemTmp controlSystem(i)];
            structureAxialExpansionTmp = [structureAxialExpansionTmp structureAxialExpansion(i)];
            coolantTmp = [coolantTmp coolant(i)];
            cladAxialExpansionTmp = [cladAxialExpansionTmp cladAxialExpansion(i)];
            fuelAxialExpansionTmp = [fuelAxialExpansionTmp fuelAxialExpansion(i)];
            dopplerTmp = [dopplerTmp doppler(i)];            
            radExpansionTmp = [radExpansionTmp radExpansion(i)];
            CRDLTmp = [CRDLTmp CRDL(i)];
            netReactivityTmp = [netReactivityTmp netReactivity(i)];
            i = i + 1;
            j = j + 1;
        elseif rhoTime(i) ~= tempTime(j)
            i = i + 1;
        end
    end
    
    controlSystem = controlSystemTmp;
    structureAxialExpansion = structureAxialExpansionTmp;
    coolant = coolantTmp;
    cladAxialExpansion = cladAxialExpansionTmp;
    fuelAxialExpansion = fuelAxialExpansionTmp;
    doppler = dopplerTmp;
    radExpansion = radExpansionTmp;
    CRDL = CRDLTmp;
    netReactivity = netReactivityTmp;
    
    %calculate reactivity coefficients for each time over the transient
    i = 1;
    alphad = 0;
    alphaf = 0;
    alphas = 0;
    alphaco = 0;
    alphar = 0;
    alphard = 0;
    while i < length(coolantAve) - 50
        alphad = alphad + (doppler(i+50)-doppler(i))/(fuelAve(i+50)-fuelAve(i));
        alphaf = alphaf + (fuelAxialExpansion(i+50)-fuelAxialExpansion(i))/(fuelAve(i+50)-fuelAve(i));
        alphas = alphas + (cladAxialExpansion(i+50)-cladAxialExpansion(i))/(cladAve(i+50)-cladAve(i)) + (structureAxialExpansion(i+50)-structureAxialExpansion(i))/(coolantAve(i+50)-coolantAve(i)); %approximating structure temp by coolant temp
        alphaco = alphaco + (coolant(i+50)-coolant(i))/(coolantAve(i+50)-coolantAve(i));
        alphar = alphar + (radExpansion(i+50)-radExpansion(i))/(coolantAve(i+50)-coolantAve(i));
        alphard = alphard + (CRDL(i+50)-CRDL(i))/(coolantOutlet(i+50)-coolantOutlet(i));
        
        i = i + 1;
        
    end
    
    %average over the number of points
    alphad = alphad/i;
    alphaf = alphaf/i;
    alphas = alphas/i;
    alphaco = alphaco/i;
    alphar = alphar/i;
    alphard = alphard/i;
    
end